# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : AppClass.sm

import statemap


class AppClassState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def C(self, fsm):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def Error(self, fsm):
        self.Default(fsm)

    def OK(self, fsm):
        self.Default(fsm)

    def One(self, fsm):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def Zero(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write('TRANSITION   : Default\n')
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException, msg

class ZerosMap_Default(AppClassState):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : ZerosMap.Default.EOS()\n")

        loopbackFlag = fsm.getState().getName() == StartMap.Unacceptable.getName()
        if loopbackFlag == False:
            fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            fsm.emptyStateStack()
            ctxt.Unacceptable()
        finally:
            fsm.setState(StartMap.Unacceptable)
            if loopbackFlag == False:
                fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : ZerosMap.Default.Unknown()\n")

        loopbackFlag = fsm.getState().getName() == StartMap.Unacceptable.getName()
        if loopbackFlag == False:
            fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            fsm.emptyStateStack()
        finally:
            fsm.setState(StartMap.Unacceptable)
            if loopbackFlag == False:
                fsm.getState().Entry(fsm)

class ZerosMap_PushIt(ZerosMap_Default):

    def C(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : ZerosMap.PushIt.C()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(ZerosMap.PopIt)
        fsm.getState().Entry(fsm)

    def Error(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : ZerosMap.PushIt.Error()\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            fsm.emptyStateStack()
        finally:
            fsm.setState(StartMap.Unacceptable)
            fsm.getState().Entry(fsm)

    def OK(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : ZerosMap.PushIt.OK()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(ZerosMap.PopIt)
        fsm.getState().Entry(fsm)

    def One(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : ZerosMap.PushIt.One()\n")

        fsm.pushState(OnesMap.PushIt)
        fsm.getState().Entry(fsm)

    def Zero(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : ZerosMap.PushIt.Zero()\n")

        fsm.pushState(ZerosMap.PushIt)
        fsm.getState().Entry(fsm)

class ZerosMap_PopIt(ZerosMap_Default):

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : ZerosMap.PopIt.Default()\n")

        fsm.getState().Exit(fsm)
        fsm.popState()
        fsm.Error()

    def Zero(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : ZerosMap.PopIt.Zero()\n")

        fsm.getState().Exit(fsm)
        fsm.popState()
        fsm.OK()

class ZerosMap:

    PushIt = ZerosMap_PushIt('ZerosMap.PushIt', 0)
    PopIt = ZerosMap_PopIt('ZerosMap.PopIt', 1)
    Default = ZerosMap_Default('ZerosMap.Default', -1)

class OnesMap_Default(AppClassState):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : OnesMap.Default.EOS()\n")

        loopbackFlag = fsm.getState().getName() == StartMap.Unacceptable.getName()
        if loopbackFlag == False:
            fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            fsm.emptyStateStack()
            ctxt.Unacceptable()
        finally:
            fsm.setState(StartMap.Unacceptable)
            if loopbackFlag == False:
                fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : OnesMap.Default.Unknown()\n")

        loopbackFlag = fsm.getState().getName() == StartMap.Unacceptable.getName()
        if loopbackFlag == False:
            fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            fsm.emptyStateStack()
        finally:
            fsm.setState(StartMap.Unacceptable)
            if loopbackFlag == False:
                fsm.getState().Entry(fsm)

class OnesMap_PushIt(OnesMap_Default):

    def C(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : OnesMap.PushIt.C()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(OnesMap.PopIt)
        fsm.getState().Entry(fsm)

    def Error(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : OnesMap.PushIt.Error()\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            fsm.emptyStateStack()
        finally:
            fsm.setState(StartMap.Unacceptable)
            fsm.getState().Entry(fsm)

    def OK(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : OnesMap.PushIt.OK()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(OnesMap.PopIt)
        fsm.getState().Entry(fsm)

    def One(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : OnesMap.PushIt.One()\n")

        fsm.pushState(OnesMap.PushIt)
        fsm.getState().Entry(fsm)

    def Zero(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : OnesMap.PushIt.Zero()\n")

        fsm.pushState(ZerosMap.PushIt)
        fsm.getState().Entry(fsm)

class OnesMap_PopIt(OnesMap_Default):

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : OnesMap.PopIt.Default()\n")

        fsm.getState().Exit(fsm)
        fsm.popState()
        fsm.Error()

    def One(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : OnesMap.PopIt.One()\n")

        fsm.getState().Exit(fsm)
        fsm.popState()
        fsm.OK()

class OnesMap:

    PushIt = OnesMap_PushIt('OnesMap.PushIt', 2)
    PopIt = OnesMap_PopIt('OnesMap.PopIt', 3)
    Default = OnesMap_Default('OnesMap.Default', -1)

class StartMap_Default(AppClassState):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : StartMap.Default.EOS()\n")

        loopbackFlag = fsm.getState().getName() == StartMap.Unacceptable.getName()
        if loopbackFlag == False:
            fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(StartMap.Unacceptable)
            if loopbackFlag == False:
                fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : StartMap.Default.Unknown()\n")

        loopbackFlag = fsm.getState().getName() == StartMap.Unacceptable.getName()
        if loopbackFlag == False:
            fsm.getState().Exit(fsm)
        fsm.setState(StartMap.Unacceptable)
        if loopbackFlag == False:
            fsm.getState().Entry(fsm)

class StartMap_PushIt(StartMap_Default):

    def C(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : StartMap.PushIt.C()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(StartMap.PopIt)
        fsm.getState().Entry(fsm)

    def Error(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : StartMap.PushIt.Error()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(StartMap.Unacceptable)
        fsm.getState().Entry(fsm)

    def OK(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : StartMap.PushIt.OK()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(StartMap.PopIt)
        fsm.getState().Entry(fsm)

    def One(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : StartMap.PushIt.One()\n")

        fsm.pushState(OnesMap.PushIt)
        fsm.getState().Entry(fsm)

    def Zero(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : StartMap.PushIt.Zero()\n")

        fsm.pushState(ZerosMap.PushIt)
        fsm.getState().Entry(fsm)

class StartMap_PopIt(StartMap_Default):

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : StartMap.PopIt.Default()\n")

        fsm.getState().Exit(fsm)
        fsm.setState(StartMap.Unacceptable)
        fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : StartMap.PopIt.EOS()\n")

        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(StartMap.Acceptable)
            fsm.getState().Entry(fsm)

class StartMap_Acceptable(StartMap_Default):
    pass

class StartMap_Unacceptable(StartMap_Default):

    def Default(self, fsm):
        if fsm.getDebugFlag() == True:
            fsm.getDebugStream().write("TRANSITION   : StartMap.Unacceptable.Default()\n")


class StartMap:

    PushIt = StartMap_PushIt('StartMap.PushIt', 4)
    PopIt = StartMap_PopIt('StartMap.PopIt', 5)
    Acceptable = StartMap_Acceptable('StartMap.Acceptable', 6)
    Unacceptable = StartMap_Unacceptable('StartMap.Unacceptable', 7)
    Default = StartMap_Default('StartMap.Default', -1)

class AppClass_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self)
        self._owner = owner
        self.setState(StartMap.PushIt)
        StartMap.PushIt.Entry(self)

    def C(self):
        self._transition = 'C'
        self.getState().C(self)
        self._transition = None

    def EOS(self):
        self._transition = 'EOS'
        self.getState().EOS(self)
        self._transition = None

    def Error(self):
        self._transition = 'Error'
        self.getState().Error(self)
        self._transition = None

    def OK(self):
        self._transition = 'OK'
        self.getState().OK(self)
        self._transition = None

    def One(self):
        self._transition = 'One'
        self.getState().One(self)
        self._transition = None

    def Unknown(self):
        self._transition = 'Unknown'
        self.getState().Unknown(self)
        self._transition = None

    def Zero(self):
        self._transition = 'Zero'
        self.getState().Zero(self)
        self._transition = None

    def getState(self):
        if self._state == None:
            raise statemap.StateUndefinedException
        return self._state

    def getOwner(self):
        return self._owner

